{
  "plan": "# Design Document: Temperature Conversion Module\n\n## 1. Goals\n\n*   Implement a Python module for temperature conversions (Celsius to Fahrenheit and vice-versa).\n*   Ensure the module is well-tested with 100% code coverage.\n*   Make the conversion functions easily importable from the `utils` package.\n*   Provide a clear plan for implementation structured as a JSON task list.\n\n## 2. Constraints\n\n*   The implementation must be in Python.\n*   Tests must be written using `pytest`.\n*   The new module should reside in a `utils` subdirectory.\n*   The task list must follow the specified LEDGER schema.\n*   The plan will be executed by other modes (e.g., \"junior\", \"tester\").\n*   This design document itself should be stored in shared context under the key \"plan\".\n\n## 3. Component Diagram\n\n```\nProjectRoot/\n├── utils/\n│   ├── __init__.py       (exports c_to_f, f_to_c; defines __all__)\n│   └── temperature.py    (defines c_to_f(c: float) -> float, f_to_c(f: float) -> float)\n├── tests/\n│   ├── __init__.py       (optional, for pytest discovery)\n│   └── test_temperature.py (contains test cases for c_to_f and f_to_c)\n└── ... (other project files like adder.py)\n```\n\n## 4. Task Graph (Implementation Plan)\n\nThe detailed task graph is provided as a JSON array of task objects, adhering to the LEDGER schema. This JSON array is the primary output for the planning phase and is intended for direct ingestion by the MicroManager.\n",
  "stack_docs": {},
  "latest_test_result": {},
  "notes": {}
}